/*
 * File: app/controller/MainController.js
 *
 * This file was generated by Sencha Designer version 2.0.0.
 * http://www.sencha.com/products/designer/
 *
 * This file requires use of the Sencha Touch 2.0.x library, under independent license.
 * License of Sencha Designer does not include license for Sencha Touch 2.0.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('kModerate.controller.MainController', {
    extend: 'Ext.app.Controller',

    config: {
        refs: {
            loginForm: '#loginForm',
            mainView: '#mainView',
            appContainer: 'appcontainer',
            list: {
                selector: '#entryList',
                xtype: 'EntryList',
                autoCreate: true
            },
            detail: {
                selector: '#entryListDetail',
                xtype: 'EntryListDetail',
                autoCreate: true
            },
            about: {
                selector: '#aboutPanel',
                xtype: 'AboutPanel',
                autoCreate: true
            }
        },

        control: {
            "#loginButton": {
                tap: 'onLogin'
            },
            ".about": {
                tap: 'onAbout'
            },
            "list": {
                itemtap: 'onListItemTap'
            },
            "#logout": {
                tap: 'onLogout'
            },
            "appcontainer": {
                activate: 'onContainerActivate'
            },
            "navigationview": {
                back: 'onLoginViewBack'
            }
        }
    },

    onLogin: function(button, e, options) {
        var form = this.getLoginForm(),
            values = form.getValues(),
            email, password, host;

        form.down('button').disable();

        email = values.email;
        password = values.password;
        host = values.kalturahost;

        if(host != kModerate.vars.host)
        {
            kModerate.vars.host = host;
        }

        // call the login action on the Kaltura Client
        this.getKalturaClient().user.loginByLoginId(Ext.Function.bind(this.loginCallback, this),
        email, password, null);


    },

    onAbout: function(button, e, options) {
        button.up('navigationview').push(this.getAbout());
        button.up('navigationview').getNavigationBar().down('about').hide();
    },

    onListItemTap: function(dataview, index, target, record, e, options) {
        this.getMainView().push(this.getDetail());
        this.getDetail().setData(record.data);
    },

    onLogout: function(button, e, options) {
        this.getAppContainer().setActiveItem(0);
        this.getLoginForm().down('button').enable();
        this.getMainView().reset();
        this.removeKsCookie();
    },

    onContainerActivate: function(container, newActiveItem, oldActiveItem, options) {
        if (kModerate.vars.ks) {
            this.getEntriesData();
            container.setActiveItem(1);
        }
    },

    onLoginViewBack: function(navigationView, eOpts) {
        navigationView.getNavigationBar().down('about').show();
    },

    loginCallback: function(success, data) {
        var form = this.getLoginForm();

        if(data.code && data.code != 'undefined')
        {
            form.down('button').enable();
            form.down('#login-error-wrapper').show();
            return false;
        }
        kModerate.vars.ks = data;
        if(kModerate.vars.rememberMeChecked)
        {
            this.setKsCookie();
        }
        // get data and store
        this.getEntriesData();
        // set active item to List
        //this.getMainView().push(this.getList());
        this.getAppContainer().setActiveItem(1);
    },

    getKalturaClient: function() {
        var kConfig = new KalturaConfiguration(null);

        // force the client to not send partner ID in the request
        kConfig.partnerId = null; 
        kConfig.serviceUrl = kModerate.vars.host;

        var kClient = new KalturaClient(kConfig);	
        kClient.callsQueue = new Array();
        if(kModerate.vars.ks)
        {
            kClient.setKs(kModerate.vars.ks);
        }

        return kClient;
    },

    getEntriesData: function() {
        var kConfig;
        var kClient;
        var me = this;

        function startSession(){
            kModerate.myLog('setting the client and ks');
            kClient = this.getKalturaClient();
            listEntries(1, 'moderationStatusIn', "1,2,3,4,5"); // list entries pending moderation (1) and flagged for moderation (5)
        }

        function listEntries(page, filterKey, filterValue, sortOrder, success, error) {
            kModerate.myLog('going to call list entries');
            var entryFilter = new KalturaBaseEntryFilter();
            entryFilter.typeEqual = 1;
            entryFilter[filterKey] = filterValue;
            entryFilter.statusEqual = KalturaEntryStatus.READY;
            entryFilter.orderBy = '+createdAt';

            var kalturaPager = new KalturaFilterPager();
            kalturaPager.pageSize = 10;
            kalturaPager.pageIndex = page;
            kClient.baseEntry.listAction(getEntrieListHandler, entryFilter, kalturaPager);
        }

        function getEntrieListHandler (success, data) {
            var entriesData = [],
                count = 0, i;

            if(data.totalCount > 0)
            {
                for(i in data.objects)
                {
                    if(!data.objects[i].id)
                    {
                        continue;
                    }
                    entry = data.objects[i];
                    entriesData[count] = {
                        entryId: entry.id, 
                        firstName: entry.name, 
                        moderationStatus: entry.moderationStatus,
                        description: entry.description,
                        tags: entry.tags,
                        strModerationStatus: moderationStatusToText(entry.moderationStatus),
                        playerHTML: getPlayerEmbed(entry.partnerId, entry.id),
                        userId: entry.userId
                    };
                    count++;
                }
                // load store
                me.getList().getStore().setData(entriesData);
            }    
        }

        function getPlayerEmbed(partnerId, entryId) {
            var width = Ext.Viewport.element.getWidth()*0.75,
                height = (width*0.75);

            html  = '<div class="kalturaPlayer" id="kaltura_container_'+entryId+'">';
            html += '<iframe src="http://cdnbakmi.kaltura.com/html5/html5lib/v1.5.9/mwEmbedFrame.php/wid/_';
            html += partnerId+'/uiconf_id/48501/entry_id/'+entryId+'/?flashvars%5Bks%5D='+kModerate.vars.ks+'" width="'+width+'" height="'+height+'" frameborder="0"></iframe>';
            html += '</div>'; 
            return html; 
        }

        function moderationStatusToText(status) {
            mods = {
                1: 'Pending Moderation',
                2: 'Approved',
                3: 'Rejected',
                5: 'Flagged for Review'
            };
            return mods[status];
        }

        startSession.call(this);

        return true;
    },

    setKsCookie: function() {
        var exdate=new Date();
        exdate.setDate(exdate.getDate() + 30);
        var c_value=kModerate.vars.ks + "; expires="+exdate.toUTCString();
        document.cookie='kmoderateLogin' + "=" + c_value;

        var c_host_value = kModerate.vars.host + "; expires="+exdate.toUTCString();
        document.cookie='kmoderateHost' + "=" + c_host_value;
    },

    removeKsCookie: function() {
        var exdate=new Date();
        exdate.setDate(exdate.getDate() - 1);
        var c_value= "; expires="+exdate.toUTCString();
        document.cookie='kmoderateLogin' + "=" + c_value;
        var c_host_value = "; expires="+exdate.toUTCString();
        document.cookie='kmoderateHost' + "=" + c_host_value;
    }

});